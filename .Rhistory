mcars
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '240c11ba18104666b25dca20cf191be5')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '55154bfe1d784c7bb24290b9cbceeb5c')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),
client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
features<-get_track_audio_features(eutop50)
library("tm") <-remove "Top 50"
eutop50$playlist_name<-removeWords(eutop50$playlist_name,c("Top","50"))
eutop50<-left_join(eutop50,features,by='track_uri')
#' Get user playlists
#'
#' This function returns a dataframe of playlists for a given Spotify username
#' @param artist_name String of Spotify username. Can be found within the Spotify App
#' @param access_token Spotify Web API token. Defaults to spotifyr::get_spotify_access_token()
#' @keywords username
#' @export
#' @examples
#' get_user_playlists('barackobama')
## helper functions
parse_playlist_list_to_df <- function(playlist_list) {
playlists_df <- map_df(1:length(playlist_list), function(x) {
tmp <- playlist_list[[x]]
map_df(1:length(tmp), function(y) {
tmp2 <- tmp[[y]]
if (!is.null(tmp2)) {
name <- ifelse(is.null(tmp2$name), NA, tmp2$name)
uri <- ifelse(is.null(tmp2$id), NA, tmp2$id)
list(
playlist_name = name,
playlist_uri = uri,
playlist_tracks_url = tmp2$tracks$href,
playlist_num_tracks = tmp2$tracks$total,
snapshot_id = tmp2$snapshot_id,
playlist_img = tmp2$images[[1]]$url
)
} else {
return(tibble())
}
})
}) %>% filter(!is.na(playlist_uri))
}
get_user_playlist_count <- function(username, access_token = get_spotify_access_token(), echo = F) {
endpoint <- paste0('https://api.spotify.com/v1/users/', username, '/playlists')
total <- GET(endpoint, query = list(access_token = access_token, limit = 1)) %>% content %>% .$total
if (echo) {
print(paste0('Found ', total, ' playlists from ', username))
}
return(total)
}
get_user_playlists <- function(username, access_token = get_spotify_access_token()) {
playlist_count <- get_user_playlist_count(username)
num_loops <- ceiling(playlist_count / 50)
offset <- 0
pb <- txtProgressBar(min = 0, max = num_loops, style = 3)
playlists_list <- map(1:ceiling(num_loops), function(x) {
endpoint <- paste0('https://api.spotify.com/v1/users/', username, '/playlists')
res <- GET(endpoint, query = list(access_token = access_token, offset = offset, limit = 50)) %>% content %>% .$items
offset <<- offset + 50
setTxtProgressBar(pb, x)
return(res)
})
playlists_df <- parse_playlist_list_to_df(playlists_list)
return(playlists_df)
}
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
features<-get_track_audio_features(eutop50)
library("tm") <-remove "Top 50"
library("tm") # remove "Top 50"
eutop50$playlist_name<-removeWords(eutop50$playlist_name,c("Top","50"))
eutop50<-left_join(eutop50,features,by='track_uri')
View(eutop50)
eutop50<-
eutop50 %>%
group_by(playlist_name) %>%
summarise(avg = mean(valence))%>%
arrange(avg)%>%
full_join(eutop50, by="playlist_name")
View(eutop50)
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
#' Get user playlists
#'
#' This function returns a dataframe of playlists for a given Spotify username
#' @param artist_name String of Spotify username. Can be found within the Spotify App
#' @param access_token Spotify Web API token. Defaults to spotifyr::get_spotify_access_token()
#' @keywords username
#' @export
#' @examples
#' get_user_playlists('barackobama')
## helper functions
parse_playlist_list_to_df <- function(playlist_list) {
playlists_df <- map_df(1:length(playlist_list), function(x) {
tmp <- playlist_list[[x]]
map_df(1:length(tmp), function(y) {
tmp2 <- tmp[[y]]
if (!is.null(tmp2)) {
name <- ifelse(is.null(tmp2$name), NA, tmp2$name)
uri <- ifelse(is.null(tmp2$id), NA, tmp2$id)
list(
playlist_name = name,
playlist_uri = uri,
playlist_tracks_url = tmp2$tracks$href,
playlist_num_tracks = tmp2$tracks$total,
snapshot_id = tmp2$snapshot_id,
playlist_img = tmp2$images[[1]]$url
)
} else {
return(tibble())
}
})
}) %>% filter(!is.na(playlist_uri))
}
get_user_playlist_count <- function(username, access_token = get_spotify_access_token(), echo = F) {
endpoint <- paste0('https://api.spotify.com/v1/users/', username, '/playlists')
total <- GET(endpoint, query = list(access_token = access_token, limit = 1)) %>% content %>% .$total
if (echo) {
print(paste0('Found ', total, ' playlists from ', username))
}
return(total)
}
get_user_playlists <- function(username, access_token = get_spotify_access_token()) {
playlist_count <- get_user_playlist_count(username)
num_loops <- ceiling(playlist_count / 50)
offset <- 0
pb <- txtProgressBar(min = 0, max = num_loops, style = 3)
playlists_list <- map(1:ceiling(num_loops), function(x) {
endpoint <- paste0('https://api.spotify.com/v1/users/', username, '/playlists')
res <- GET(endpoint, query = list(access_token = access_token, offset = offset, limit = 50)) %>% content %>% .$items
offset <<- offset + 50
setTxtProgressBar(pb, x)
return(res)
})
playlists_df <- parse_playlist_list_to_df(playlists_list)
return(playlists_df)
}
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '240c11ba18104666b25dca20cf191be5')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '55154bfe1d784c7bb24290b9cbceeb5c')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),
client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),
client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
# devtools::install_github('charlie86/spotifyr')
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = '240c11ba18104666b25dca20cf191be5')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '55154bfe1d784c7bb24290b9cbceeb5c')
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),
client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
features<-get_track_audio_features(eutop50)
library("tm") # remove "Top 50"
eutop50$playlist_name<-removeWords(eutop50$playlist_name,c("Top","50", " "))
eutop50<-left_join(eutop50,features,by='track_uri')
eutop50<-
eutop50 %>%
group_by(playlist_name) %>%
summarise(avg = mean(valence))%>%
arrange(avg)%>%
full_join(eutop50, by="playlist_name")
eutop50<-
eutop50 %>%
group_by(playlist_name) %>%
summarise(avg = mean(valence))%>%
arrange(avg)%>%
full_join(eutop50, by="playlist_name")
View(eutop50)
View(eutop50)
View(eutop50)
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
View(eutop50)
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
#' Get tracks from one or more playlists
#'
#' This function returns tracks from a dataframe of playlists on Spotify
#' @param playlists Dataframe containing the columns `playlist_num_tracks`, `playlist_tracks_url`, `playlist_name`, and `playlist_img`, corresponding to Spotify playlists. Can be output from spotifyr::get_user_playlists()
#' @param access_token Spotify Web API token. Defaults to spotifyr::get_spotify_access_token()
#' @keywords album tracks
#' @export
#' @examples
#' playlists <- get_user_playlists('barackobama')
#' playlist_tracks <- get_playlist_tracks(playlists)
get_playlist_tracks <- function(playlists, access_token = get_spotify_access_token()) {
pb <- txtProgressBar(min = 0, max = nrow(playlists), style = 3)
playlist_tracks_df <- map_df(1:nrow(playlists), function(x) {
num_loops <- ceiling(playlists$playlist_num_tracks[x] / 100)
df <- map_df(1:num_loops, function(y) {
res <- GET(playlists$playlist_tracks_url[x], query = list(access_token = access_token, limit = 100, offset = (100 * y) - 100)) %>% content %>% .$items
if (length(res) == 0) {
track_info <- tibble()
} else {
track_info <- map_df(1:length(res), function(z) {
if (!is.null(res[[z]]$track$id)) {
list(
playlist_name = playlists$playlist_name[x],
playlist_img = playlists$playlist_img[x],
track_name = res[[z]]$track$name,
track_uri = res[[z]]$track$id,
artist_name = res[[z]]$track$artists[[1]]$name,
album_name = res[[z]]$track$album$name,
album_img = ifelse(length(res[[z]]$track$album$images) > 0, res[[z]]$track$album$images[[1]]$url, '')
)
}
})
}
})
setTxtProgressBar(pb, x)
return(df)
})
return(playlist_tracks_df)
}
eutop50<-get_user_playlists('delospro')%>%
get_playlist_tracks()
access_token <- get_spotify_access_token(client_id = Sys.getenv('SPOTIFY_CLIENT_ID'),
client_secret = Sys.getenv('SPOTIFY_CLIENT_SECRET'))
a <- c(1,3,5)
b <- (7,9,11)
b <- c(7,9,11)
a + b
a-b
setwd("~/Documents/GitHub/blogdown_site")
library(blogdown)
serve_site()
